{"version":3,"sources":["logo.svg","components/Home/Home.js","components/Profile/Profile.js","components/Blogs/Blogs.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","react_default","a","createElement","Component","Profile","Blogs","state","blogs","fetch","res","json","console","log","this","setState","details","map","item","i","key","App","react_router","className","href","style","display","justifyContent","minWidth","react_router_dom","to","exact","path","component","React","Boolean","window","location","hostname","match","ReactDOM","render","hashType","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mNCUzBC,mLANP,OACIC,EAAAC,EAAAC,cAAA,yBAHOC,aCQJC,mLANP,OACIJ,EAAAC,EAAAC,cAAA,4BAHUC,sCC+BPE,6MA3BXC,MAAQ,CACJC,MAAO,uNAKSC,MAAM,4BAAlBC,kBACcA,EAAIC,cAAlBH,SACJI,QAAQC,IAAIL,GACZM,KAAKC,SAAS,CAAEP,MAAMA,EAAMQ,QAAQR,2IAGpC,OACIP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,UAEIW,KAAKP,MAAMC,MAAMS,IAAI,SAACC,EAAMC,GACxB,OAAOlB,EAAAC,EAAAC,cAAA,MAAIiB,IAAKD,GAAID,cAtBxBd,aCoCLiB,mLAxBX,OACEpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACIrB,EAAAC,EAAAC,cAAA,OAAKoB,UAAU,OACbtB,EAAAC,EAAAC,cAAA,UAAQoB,UAAU,cAChBtB,EAAAC,EAAAC,cAAA,KAAGqB,KAAK,UACNvB,EAAAC,EAAAC,cAAA,6BAEFF,EAAAC,EAAAC,cAAA,OAAKsB,MAAO,CAACC,QAAQ,OAAQC,eAAe,gBAAiBC,SAAS,UACpE3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAMC,GAAG,SAAT,QACA7B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAMC,GAAG,UAAT,SACA7B,EAAAC,EAAAC,cAAA,KAAGqB,KAAK,UAAR,SACAvB,EAAAC,EAAAC,cAAA,KAAGqB,KAAK,WAAR,YAGNvB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACErB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOS,OAAK,EAACC,KAAK,QAAQC,UAAWjC,IACrCC,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOS,OAAK,EAACC,KAAK,WAAWC,UAAW5B,IACxCJ,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOS,OAAK,EAACC,KAAK,SAASC,UAAW3B,cAtBhC4B,IAAM9B,WCGJ+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOxC,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAaa,SAAS,WAAUzC,EAAAC,EAAAC,cAACwC,EAAD,OAC1CC,SAASC,eAAe,SDyHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4b245beb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nclass Home extends Component {\n    render(){\n        return(\n            <h1>Home</h1>\n        )\n    }\n}\n\nexport default Home","import React, { Component } from 'react';\n\nclass Profile extends Component {\n    render(){\n        return(\n            <h1>Profile</h1>\n        )\n    }\n}\n\nexport default Profile","import React, { Component } from 'react';\n\nclass Blogs extends Component {\n\n\n\n    state = {\n        blogs: []\n    }\n\n\n    async componentDidMount() {\n        let res = await fetch('/listblogs')\n        let blogs = await res.json()\n        console.log(blogs)\n        this.setState({ blogs:blogs.details.blogs })\n    }\n    render() {\n        return (\n            <div>\n                <h1>Blogs</h1>\n                <ul>\n                {\n                    this.state.blogs.map((item, i) => {\n                        return <li key={i}>{item}</li>\n                    })\n                }\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default Blogs","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios'\nimport { Switch, Route, Link } from 'react-router-dom'\nimport Home from './components/Home/Home';\nimport Profile from './components/Profile/Profile';\nimport Blogs from './components/Blogs/Blogs';\n\nclass App extends React.Component {\n\n\n\n  render() {\n    return (\n      <Switch>\n          <div className=\"App\">\n            <header className=\"App-header\">\n              <a href='/login'>\n                <h1>Do Auth0 Login</h1>\n              </a>\n              <div style={{display:'flex', justifyContent:'space-between', minWidth:'30rem'}}>\n                <Link to=\"/home\" >Home</Link>\n                <Link to=\"/blogs\">Blogs</Link>\n                <a href=\"/login\" >Login</a>\n                <a href=\"/logout\" >Logout</a>\n              </div>\n            </header>\n          <Switch>\n            <Route exact path=\"/home\" component={Home} />\n            <Route exact path=\"/profile\" component={Profile} />\n            <Route exact path=\"/blogs\" component={Blogs} />\n          </Switch>\n          </div>\n        </Switch>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport  { BrowserRouter, HashRouter } from 'react-router-dom'\n\nReactDOM.render(<HashRouter  hashType=\"noslash\"><App/></HashRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}