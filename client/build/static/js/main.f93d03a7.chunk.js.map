{"version":3,"sources":["logo.svg","components/reuse/header/header.js","components/Home/Home.js","components/Profile/Profile.js","components/Blogs/Blogs.js","components/MainPage/main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","style","display","justifyContent","minWidth","react_router_dom","to","href","Home","header","Component","Profile","axios","get","prof","console","log","data","details","Blogs","state","blogs","fetch","res","json","this","setState","map","item","i","key","Main","flex","App","react_router","exact","path","component","React","Boolean","window","location","hostname","match","ReactDOM","render","hashType","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8NCgBzBC,EAbA,WACX,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAClBH,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACC,QAAQ,OAAQC,eAAe,gBAAiBC,SAAS,UACpEP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAG,SAAT,QACAT,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAG,UAAT,SACAT,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,YAAR,WACAV,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,WAAR,aCIKC,mLATP,OACIX,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACU,EAAD,MACAZ,EAAAC,EAAAC,cAAA,0BALGW,sCCgBJC,4TAbUC,IAAMC,IAAI,oBAAvBC,WAEAC,QAAQC,IAAIF,EAAKG,KAAKC,uIAK1B,OACIrB,EAAAC,EAAAC,cAAA,4BAXUW,aCgCPS,6MA5BXC,MAAQ,CACJC,MAAO,uNAKSC,MAAM,4BAAlBC,kBACcA,EAAIC,cAAlBH,SACJN,QAAQC,IAAIK,GACZI,KAAKC,SAAS,CAAEL,MAAMA,EAAMH,QAAQG,2IAGpC,OACIxB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACU,EAAD,MACAZ,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,UAEI0B,KAAKL,MAAMC,MAAMM,IAAI,SAACC,EAAMC,GACxB,OAAOhC,EAAAC,EAAAC,cAAA,MAAI+B,IAAKD,GAAID,cAvBxBlB,aCkBLqB,mLAhBP,OACIlC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACdH,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,UACJV,EAAAC,EAAAC,cAAA,6BAEJF,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAC+B,KAAK,EAAE9B,QAAS,OAAQC,eAAgB,kBACjDN,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,UAAR,oBAGRV,EAAAC,EAAAC,cAAA,+BAZGW,aC6BJuB,gOAdX,OACEpC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,KACIrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAACmC,EAAA,EAAD,KACErC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWN,IACjClC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,QAAQC,UAAW7B,IACrCX,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,UAAW1B,IACxCd,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWlB,cAfhCmB,IAAM5B,WCEJ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOhD,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAayC,SAAS,WAAUjD,EAAAC,EAAAC,cAACgD,EAAD,OAC1CC,SAASC,eAAe,SDyHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f93d03a7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport { Switch, Route, Link } from 'react-router-dom'\n\nconst Header = ()=>{\n    return(\n        <header className=\"App-header\">\n        <div style={{display:'flex', justifyContent:'space-between', minWidth:'35rem'}}>\n          <Link to=\"/home\" >Home</Link>\n          <Link to=\"/blogs\">Blogs</Link>\n          <a href=\"/profile\" >Profile</a>\n          <a href=\"/logout\" >Logout</a>\n        </div>\n      </header>\n    )\n}\n\nexport default Header","import React, { Component } from 'react';\nimport Header from '../reuse/header/header';\n\nclass Home extends Component {\n    render(){\n        return(\n            <div>\n                <Header />\n                <h1>Home</h1>\n            </div>\n        )\n    }\n}\n\nexport default Home","import React, { Component } from 'react';\nimport axios from 'axios'\n\nclass Profile extends Component {\n    \n   async componentDidMount(){\n        let prof = await axios.get('/profile')\n        if(prof){\n            console.log(prof.data.details)\n        }\n    }\n\n    render(){\n        return(\n            <h1>Profile</h1>\n        )\n    }\n}\n\nexport default Profile","import React, { Component } from 'react';\nimport Header from '../reuse/header/header';\n\nclass Blogs extends Component {\n\n\n\n    state = {\n        blogs: []\n    }\n\n\n    async componentDidMount() {\n        let res = await fetch('/listblogs')\n        let blogs = await res.json()\n        console.log(blogs)\n        this.setState({ blogs:blogs.details.blogs })\n    }\n    render() {\n        return (\n            <div>\n                <Header />\n                <h1>Blogs</h1>\n                <ul>\n                {\n                    this.state.blogs.map((item, i) => {\n                        return <li key={i}>{item}</li>\n                    })\n                }\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default Blogs","import React, { Component } from 'react';\nimport Header from '../reuse/header/header';\n\nclass Main extends Component {\n    render() {\n        return (\n            <div>\n                <header className=\"App-header\">\n                    <a href='/login'>\n                        <h1>Do Auth0 Login</h1>\n                    </a>\n                    <div style={{flex:1,display: 'flex', justifyContent: 'space-between'}}>\n                        <a href=\"/login\" >Login | Signup</a>\n                    </div>\n                </header>\n                <h1>Main Page</h1>\n            </div>\n        )\n    }\n}\n\nexport default Main","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios'\nimport { Switch, Route, Link } from 'react-router-dom'\nimport Home from './components/Home/Home';\nimport Profile from './components/Profile/Profile';\nimport Blogs from './components/Blogs/Blogs';\nimport Main from './components/MainPage/main';\n\nclass App extends React.Component {\n\n\n  componentDidMount(){\n\n  }\n\n  render() {\n    return (\n      <Switch>\n          <div className=\"App\">\n          <Switch>\n            <Route exact path=\"/\" component={Main} />\n            <Route exact path=\"/home\" component={Home} />\n            <Route exact path=\"/profile\" component={Profile} />\n            <Route exact path=\"/blogs\" component={Blogs} />\n          </Switch>\n          </div>\n        </Switch>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport  { BrowserRouter, HashRouter } from 'react-router-dom'\n\nReactDOM.render(<HashRouter  hashType=\"noslash\"><App/></HashRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}